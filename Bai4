#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'crosswordPuzzle' function below.
 *
 * The function is expected to return a STRING_ARRAY.
 * The function accepts following parameters:
 *  1. STRING_ARRAY crossword
 *  2. STRING words
 */
vector<string> splitWord(string &words, string del){
    int start = 0;
    vector<string> word;
    for (int i = 0; i < words.length(); i++){
        if (words[i] == del[0] || i == words.length() - 1){
            string temp;
            for (int j = start; j < i; j ++){
                temp.push_back(words[j]);
            }
            if (i == words.length() - 1){
                temp.push_back(words[i]);
            }
            word.push_back(temp);
        start = i + 1;
        }
        
    }
    return word;
}

vector<vector<pair<int, int>>> blanks(vector<string>& crossword, string direction){
    vector<vector<pair<int,int>>>blankIndices;
    for (int i = 0; i < crossword.size(); i ++){
            vector<pair<int,int>>blank;
        for (int j = 0; j < crossword.size(); j ++){
            int a,b;
            if (direction == "horizontal"){
                a = i;
                b = j;
            }else{
                a = j;
                b = i;
            }
            
            if (crossword[a][b] == '-'){
                pair<int,int> p(a,b);
                blank.push_back(p);
                if (j == crossword.size() - 1){
                    blankIndices.push_back(blank);
                }
            }else if (blank.size() > 1){
                blankIndices.push_back(blank);
                blank.clear();
            }else blank.clear();
        }
    }
    return blankIndices;
    
}

void printBlanks(vector<vector<pair<int,int>>>&blanks){
    for (int i = 0; i < blanks.size(); i ++){
        vector<pair<int,int>> v = blanks[i];
        for (int j = 0; j < v.size(); j ++){
            pair<int,int> p = v[j];
            cout<<'('<<p.first<<", "<<p.second<<')'<<' ';
        }
        cout<<endl;
    }
}

void printWord(vector<string>& word){
    for (int i = 0; i < word.size(); i ++){
        cout<<word[i]<<' ';
    }
    cout<<endl;
}

bool fillWord(vector<string>& crossword,string& word, vector<pair<int,int>> blanks){
    bool canbeFilled = true;
    for (int i = 0; i < blanks.size(); i ++){
        pair<int,int> v = blanks[i];
        if (crossword[v.first][v.second] != '-' && crossword[v.first][v.second] != word[i]){
            canbeFilled = false;
        }
    }
    
    if(canbeFilled){
        for (int i = 0; i < blanks.size(); i++){
            pair<int,int> v = blanks[i];
            crossword[v.first][v.second] = word[i];
        }
    }
    
    return canbeFilled;
}

void removeBlanks(vector<string>& crossword, vector<pair<int,int>> blanks){
    for (int i = 0; i < blanks.size(); i++){
        pair<int,int> v = blanks[i];
        crossword[v.first][v.second] = '-';
    }
}

bool solve(vector<string>& crossword, vector<vector<pair<int,int>>> blank, vector<string>& word, int start){
    for (int i = start; i < word.size(); i ++){
        for (int j = 0; j < blank.size(); j ++){
        string words = word[i];
        vector<pair<int,int>> blanks = blank[j];
        
        if (words.size() == blanks.size() ){
            if(fillWord(crossword,words, blanks)){
                if(solve(crossword, blank, word, start + 1 )){
                   return true;
                }
                else{
                removeBlanks(crossword, blanks);
            }
            }
        }
        
    }
    return false; //???
    }
    return true;
}
vector<string> crosswordPuzzle(vector<string>& crossword, string& words) {
  vector<vector<pair<int,int>>> horizon = blanks(crossword, "horizontal");
  vector<vector<pair<int,int>>> veticial = blanks(crossword, "vertical"); 
  string del = ";";
  vector<string> word = splitWord(words, del);
  
  vector<vector<pair<int,int>>> blank;
  blank.insert(blank.begin(), horizon.begin(), horizon.end());
  blank.insert(blank.end(), veticial.begin(), veticial.end());
    
  printBlanks(blank);
  printWord(word);
    solve(crossword, blank, word, 0);

  return crossword;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    vector<string> crossword(10);

    for (int i = 0; i < 10; i++) {
        string crossword_item;
        getline(cin, crossword_item);

        crossword[i] = crossword_item;
    }

    string words;
    getline(cin, words);

    vector<string> result = crosswordPuzzle(crossword, words);

    for (size_t i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
